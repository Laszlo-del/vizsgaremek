import requests
import time
from gpiozero import PWMLED 
import RPi.GPIO as GPIO
import Adafruit_DHT

# GPIO be√°ll√≠t√°sok
GPIO.setmode(GPIO.BCM)

# DHT11 szenzor inicializ√°l√°sa
DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 17  # Citroms√°rga vezet√©k - GPIO17

# LED-ek be√°ll√≠t√°sa
red_led = PWMLED(21)    # Piros LED - GPIO21
blue_led = PWMLED(20)   # K√©k LED - GPIO20

# Helyes API kulcs a saj√°t ThingSpeak csatorn√°dhoz
API_KEY = 'CMQ9KPGXO1O0N9TU'

# Adatk√ºld≈ë f√ºggv√©ny
def send_data_to_thingspeak(temp, humid):
    url = f'https://api.thingspeak.com/update?api_key={API_KEY}&field1={temp}&field2={humid}'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"‚úÖ Sikeres adatk√ºld√©s: {temp:.1f}¬∞C, {humid:.1f}%")
        else:
            print(f"‚ö†Ô∏è Sikertelen adatk√ºld√©s: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Hiba az adatk√ºld√©s sor√°n: {e}")

# F≈ë ciklus
try:
    while True:
        humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)

        if humidity is not None and temperature is not None:
            print(f"\nüå°Ô∏è H≈ëm√©rs√©klet: {temperature:.1f}¬∞C")
            print(f"üíß P√°ratartalom: {humidity:.1f}%")

            # LED vez√©rl√©s √©s jelz√©s
            if temperature <= 20: 
                red_led.value = 1
                blue_led.value = 0
                print("üî¥ Piros LED vil√°g√≠t ‚Äì H≈±v√∂s van.")
            else:
                red_led.value = 0
                blue_led.value = 1
                print("üîµ K√©k LED vil√°g√≠t ‚Äì Melegebb h≈ëm√©rs√©klet.")

            send_data_to_thingspeak(temperature, humidity)

        else:
            print("‚ö†Ô∏è Sikertelen szenzor olvas√°s. Ellen≈ërizd a bek√∂t√©st.")
        
        time.sleep(10)

except KeyboardInterrupt:
    print("\nüõë Program le√°ll√≠tva a felhaszn√°l√≥ √°ltal.")
    GPIO.cleanup()
    red_led.close()
    blue_led.close()
