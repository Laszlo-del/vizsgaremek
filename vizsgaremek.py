import time
from gpiozero import PWMLED
import Adafruit_DHT
import RPi.GPIO as GPIO
import requests
import datetime

# --- GPIO Be√°ll√≠t√°sok ---
# Be√°ll√≠tja a GPIO pinek sz√°moz√°si m√≥dj√°t BCM (Broadcom chip) m√≥dra.
# Ez azt jelenti, hogy a GPIO sz√°moz√°st haszn√°ljuk, nem a fizikai pin sz√°mokat.
GPIO.setmode(GPIO.BCM)

# --- DHT Szenzor Be√°ll√≠t√°sok ---
DHT_SENSOR = Adafruit_DHT.DHT11 # A haszn√°lt DHT szenzor t√≠pusa (DHT11 vagy DHT22)
DHT_PIN = 17 # A DHT szenzor adatl√°b√°nak GPIO pinje. Ezt a GPIO sz√°mot m√≥dos√≠tsd, ha m√°shova k√∂t√∂tted!

# --- H≈ëm√©rs√©kleti Limit a LED Jelz√©shez ---
TEMP_LIMIT = 20 # A h≈ëm√©rs√©klet hat√°r (Celsius fokban), ami alapj√°n a LED-ek sz√≠ne v√°lt.

# --- LED Sz√≠nek List√°ja ---
COLORS = ['piros', 'z√∂ld', 'k√©k'] # A programban haszn√°lt LED sz√≠nek list√°ja.

# --- Alap√©rtelmezett GPIO Kioszt√°s a LED-ekhez ---
# Ezek az alap√©rtelmezett GPIO pinek, amelyeket a LED-ekhez haszn√°lunk.
# Fontos: Minden LED-et k√∂ss be egy megfelel≈ë el≈ët√©t-ellen√°ll√°ssal, hogy ne s√©r√ºlj√∂n a LED √©s a Raspberry Pi!
gpio_pins = {
    'piros': 21,
    'z√∂ld': 16, # Ha nincs z√∂ld LED-ed, ezt a GPIO-t haszn√°lhatod m√°sra, vagy figyelmen k√≠v√ºl hagyhatod.
    'k√©k': 20
}

# --- Alap√©rtelmezett LED Sz√≠n Viselked√©s ---
# Meghat√°rozza, hogy melyik LED vil√°g√≠tson a h≈ëm√©rs√©kleti limit alatt vagy felett.
led_below_limit = 'k√©k'   # Ha a h≈ëm√©rs√©klet <= TEMP_LIMIT, akkor a k√©k LED vil√°g√≠t.
led_above_limit = 'piros' # Ha a h≈ëm√©rs√©klet > TEMP_LIMIT, akkor a piros LED vil√°g√≠t.

# --- Thingspeak Be√°ll√≠t√°sok ---
# K√©rlek, gy≈ëz≈ëdj meg r√≥la, hogy ezek az API kulcsok √©s a csatorna ID helyesek!
THINGSPEAK_WRITE_API_KEY = 'ZRSWQ48LKWHEEW6G' # A Thingspeak csatorn√°d 'Write API Key'-e. Ezzel k√ºldesz adatokat.
THINGSPEAK_USER_API_KEY = '' # A Thingspeak fi√≥kod 'User API Key'-e. Ezt az 'Account' -> 'My Profile' alatt tal√°lod. Sz√ºks√©ges az adatok t√∂rl√©s√©hez.
THINGSPEAK_CHANNEL_ID = '2974228' # A Thingspeak csatorn√°d azonos√≠t√≥ja (Channel ID).

THINGSPEAK_URL = "https://api.thingspeak.com/update" # A Thingspeak adatk√ºld≈ë URL-je.
THINGSPEAK_DELETE_URL_BASE = "https://api.thingspeak.com/channels/" # A Thingspeak adatt√∂rl≈ë URL-j√©nek alapja.

# LED p√©ld√°nyok t√°rol√°s√°ra szolg√°l√≥ sz√≥t√°r.
leds = {}

# --- Seg√©df√ºggv√©nyek ---

def init_leds():
    """
    Inicializ√°lja a LED-eket a jelenlegi GPIO be√°ll√≠t√°sok alapj√°n, vagy friss√≠ti azokat.
    Ez a f√ºggv√©ny felszabad√≠tja az el≈ëz≈ëleg foglalt GPIO er≈ëforr√°sokat √©s √∫jra l√©trehozza a LED objektumokat.
    """
    global leds
    # Felszabad√≠tja a kor√°bbi GPIO er≈ëforr√°sokat, ha m√°r l√©teznek LED objektumok.
    for led in leds.values():
        if isinstance(led, PWMLED): # Ellen≈ërizz√ºk, hogy PWMLED objektum-e, miel≈ëtt bez√°rjuk.
            led.close()
    
    # √öjra inicializ√°lja a LED-eket az aktu√°lis gpio_pins be√°ll√≠t√°sok alapj√°n.
    leds = {}
    for color, pin in gpio_pins.items():
        try:
            # L√©trehozza a PWMLED objektumot a megadott GPIO pinen.
            leds[color] = PWMLED(pin)
        except Exception as e:
            # Hiba eset√©n √©rtes√≠t√©st k√ºld √©s null√°ra √°ll√≠tja a LED objektumot.
            print(f"‚ö†Ô∏è Hiba a {color} LED inicializ√°l√°sakor a {pin} GPIO-n: {e}")
            print("K√©rlek, ellen≈ërizd, hogy a GPIO pin szabad-e √©s l√©tezik-e.")
            leds[color] = None # Jelzi, hogy ez a LED nem inicializ√°lhat√≥.

    print("‚úÖ LED-ek inicializ√°lva az √∫j GPIO-kkal.")


def set_led(color):
    """
    Be√°ll√≠tja a megadott sz√≠n≈± LED-et (bekapcsolja), a t√∂bbi LED-et kikapcsolja.
    """
    # Minden LED kikapcsol√°sa.
    for led_name, led_object in leds.items():
        if led_object is not None: # Csak akkor pr√≥b√°lja meg be√°ll√≠tani, ha inicializ√°lva lett.
            led_object.value = 0 # Kikapcsolja a LED-et.
    
    # A kiv√°lasztott LED bekapcsol√°sa.
    if color in leds and leds[color] is not None:
        leds[color].value = 1 # Bekapcsolja a LED-et.
        # Ki√≠rja, melyik LED vil√°g√≠t, √©s milyen h≈ëm√©rs√©kleti felt√©telhez tartozik.
        print(f"üîî LED: {color.upper()} ({'<=20¬∞C' if color == led_below_limit else '>20¬∞C'})")
    else:
        print(f"‚ö†Ô∏è Hib√°s vagy nem inicializ√°lt LED sz√≠n megadva: {color}")

def send_to_thingspeak(temp, hum):
    """
    Elk√ºldi a h≈ëm√©rs√©kletet √©s p√°ratartalmat a Thingspeak csatorn√°ra.
    """
    # Ellen≈ërzi, hogy az API kulcs √©s a csatorna ID be van-e √°ll√≠tva.
    if not THINGSPEAK_WRITE_API_KEY or not THINGSPEAK_CHANNEL_ID:
        print("‚ùå Thingspeak API kulcs vagy csatorna ID hi√°nyzik. Adatk√ºld√©s kihagyva.")
        return

    try:
        # √ñssze√°ll√≠tja az adatcsomagot (payload) a Thingspeak sz√°m√°ra.
        # A h≈ëm√©rs√©klet √©s p√°ratartalom kerek√≠t√©se k√©t tizedesjegyre.
        payload = {
            'api_key': THINGSPEAK_WRITE_API_KEY,
            'field1': round(temp, 2), # A h≈ëm√©rs√©klet az 1. mez≈ëbe.
            'field2': round(hum, 2)    # A p√°ratartalom a 2. mez≈ëbe.
        }
        # Elk√ºldi az adatokat HTTP GET k√©r√©ssel a Thingspeak URL-re.
        response = requests.get(THINGSPEAK_URL, params=payload)

        # Ellen≈ërzi a v√°lasz st√°tuszk√≥dj√°t. 200 = OK.
        if response.status_code == 200:
            print("‚¨ÜÔ∏è Adatok elk√ºldve Thingspeakre.")
        else:
            print(f"‚ùå Hiba a Thingspeak k√ºld√©skor: HTTP {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        # H√°l√≥zati hib√°k kezel√©se (pl. nincs internetkapcsolat).
        print(f"‚ö†Ô∏è H√°l√≥zati hiba a Thingspeak k√ºld√©skor: {e}")

def delete_thingspeak_data(minutes_ago):
    """
    T√∂rli az adatokat a Thingspeak csatorn√°r√≥l egy megadott id≈ëintervallumb√≥l.
    Ehhez a 'User API Key' sz√ºks√©ges.
    """
    # Ellen≈ërzi, hogy a User API kulcs √©s a csatorna ID be van-e √°ll√≠tva.
    if not THINGSPEAK_USER_API_KEY or not THINGSPEAK_CHANNEL_ID:
        print("‚ùå Thingspeak User API kulcs vagy csatorna ID hi√°nyzik. T√∂rl√©s kihagyva.")
        return

    # Kisz√°m√≠tja az id≈ëpontot, ameddig t√∂r√∂lni kell az adatokat.
    delete_before_date = datetime.datetime.now() - datetime.timedelta(minutes=minutes_ago)

    # √ñssze√°ll√≠tja a t√∂rl√©si URL-t.
    delete_url = f"{THINGSPEAK_DELETE_URL_BASE}{THINGSPEAK_CHANNEL_ID}/feeds.json"
    # √ñssze√°ll√≠tja a param√©tereket a t√∂rl√©si k√©relemhez.
    # Az 'end' param√©ter ISO 8601 form√°tumban, UTC id≈ëz√≥n√°ban.
    params = {
        'api_key': THINGSPEAK_USER_API_KEY,
        'end': delete_before_date.isoformat(sep='T', timespec='seconds') + 'Z'
    }

    print(f"Adatok t√∂rl√©se a {THINGSPEAK_CHANNEL_ID} csatorn√°r√≥l {minutes_ago} perccel ezel≈ëtti id≈ëpontig ({delete_before_date.strftime('%Y-%m-%d %H:%M:%S')} el≈ëtt).")
    try:
        # Elk√ºldi a t√∂rl√©si k√©r√©st HTTP DELETE met√≥dussal.
        response = requests.delete(delete_url, params=params)

        # Ellen≈ërzi a v√°lasz st√°tuszk√≥dj√°t.
        if response.status_code == 200:
            print("‚úÖ Adatok sikeresen t√∂r√∂lve a Thingspeakr≈ël!")
        else:
            print(f"‚ùå Hiba a Thingspeak t√∂rl√©skor: HTTP {response.status_code} - {response.text}")
            print("Tipp: Ellen≈ërizd a USER_API_KEY-t, az kell a t√∂rl√©shez!")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è H√°l√≥zati hiba a Thingspeak t√∂rl√©skor: {e}")

# --- Konfigur√°ci√≥s Men√ºpontok ---

def change_gpio_pins():
    """
    Lehet≈ëv√© teszi a piros, z√∂ld √©s k√©k LED-ek GPIO portjainak m√≥dos√≠t√°s√°t.
    A felhaszn√°l√≥ egyes√©vel adhatja meg az √∫j GPIO sz√°mokat.
    """
    print("\nüéõÔ∏è GPIO portok m√≥dos√≠t√°sa:")
    for color in COLORS: # V√©gigmegy a sz√≠neken (piros, z√∂ld, k√©k).
        while True:
            try:
                # Bek√©ri az √∫j GPIO sz√°mot, megjelen√≠tve a jelenlegi be√°ll√≠t√°st.
                pin_input = input(f"{color.upper()} LED GPIO (jelenleg {gpio_pins.get(color, 'nincs be√°ll√≠tva')}): ")
                if pin_input.strip() == '': # Ha a felhaszn√°l√≥ √ºresen hagyja, a jelenlegi √©rt√©k megmarad.
                    print(f"‚è© {color.upper()} LED GPIO megtartva: {gpio_pins.get(color, 'nincs be√°ll√≠tva')}")
                    break
                pin = int(pin_input) # Sz√°mm√° konvert√°lja a bevitelt.
                # Ellen≈ërzi, hogy √©rv√©nyes GPIO sz√°mot adott-e meg (0-27 k√∂z√∂tt).
                if 0 <= pin <= 27:
                    gpio_pins[color] = pin # Friss√≠ti a gpio_pins sz√≥t√°rban az √©rt√©ket.
                    break
                else:
                    print("‚ö†Ô∏è √ârv√©nytelen GPIO sz√°m. K√©rlek, 0 √©s 27 k√∂z√∂tti sz√°mot adj meg.")
            except ValueError:
                print("‚ö†Ô∏è Hib√°s √©rt√©k. K√©rlek, csak sz√°mot adj meg.")
    init_leds() # Az √∫j GPIO pinekkel √∫jra inicializ√°lja a LED-eket.

def change_led_behavior():
    """
    Lehet≈ëv√© teszi a h≈ëm√©rs√©klethez tartoz√≥ LED sz√≠nek be√°ll√≠t√°s√°t.
    A felhaszn√°l√≥ kiv√°laszthatja, melyik LED vil√°g√≠tson a TEMP_LIMIT alatt √©s felett.
    """
    global led_below_limit, led_above_limit
    print(f"\nüé® LED sz√≠nek be√°ll√≠t√°sa a h≈ëm√©rs√©klet alapj√°n ({TEMP_LIMIT}¬∞C a hat√°r):")
    
    # Be√°ll√≠t√°s a TEMP_LIMIT alatt.
    while True:
        below_input = input(f"{TEMP_LIMIT}¬∞C alatt milyen LED sz√≠n legyen (piros/z√∂ld/k√©k, jelenleg: {led_below_limit}): ").strip().lower()
        if below_input in COLORS:
            led_below_limit = below_input
            break
        elif below_input == '':
            print("Megtartva a jelenlegi be√°ll√≠t√°s.")
            break
        else:
            print("‚ö†Ô∏è Hib√°s sz√≠n! K√©rlek, v√°lassz a 'piros', 'z√∂ld', 'k√©k' k√∂z√ºl.")
            
    # Be√°ll√≠t√°s a TEMP_LIMIT felett.
    while True:
        above_input = input(f"{TEMP_LIMIT}¬∞C felett milyen LED sz√≠n legyen (piros/z√∂ld/k√©k, jelenleg: {led_above_limit}): ").strip().lower()
        if above_input in COLORS:
            led_above_limit = above_input
            break
        elif above_input == '':
            print("Megtartva a jelenlegi be√°ll√≠t√°s.")
            break
            
        else:
            print("‚ö†Ô∏è Hib√°s sz√≠n! K√©rlek, v√°lassz a 'piros', 'z√∂ld', 'k√©k' k√∂z√ºl.")

    print(f"‚úÖ Be√°ll√≠tva: <={TEMP_LIMIT}¬∞C ‚ûú {led_below_limit.upper()}, >{TEMP_LIMIT}¬∞C ‚ûú {led_above_limit.upper()}")

def change_thingspeak_settings():
    """
    Lehet≈ëv√© teszi a Thingspeak be√°ll√≠t√°sok (Csatorna ID, √çr√≥ API kulcs, Felhaszn√°l√≥i API kulcs) m√≥dos√≠t√°s√°t.
    """
    global THINGSPEAK_CHANNEL_ID, THINGSPEAK_WRITE_API_KEY, THINGSPEAK_USER_API_KEY
    print("\n‚òÅÔ∏è Thingspeak be√°ll√≠t√°sok m√≥dos√≠t√°sa:")
    
    # Bek√©ri a Csatorna ID-t. Ha √ºresen hagyja, a jelenlegi megmarad.
    channel_id_input = input(f"Thingspeak csatorna ID (jelenleg '{THINGSPEAK_CHANNEL_ID}'): ").strip()
    if channel_id_input:
        THINGSPEAK_CHANNEL_ID = channel_id_input

    # Bek√©ri az √çr√≥ API kulcsot. Ha √ºresen hagyja, a jelenlegi megmarad.
    write_api_key_input = input(f"Thingspeak √çr√≥ API kulcs (jelenleg '{THINGSPEAK_WRITE_API_KEY}'): ").strip()
    if write_api_key_input:
        THINGSPEAK_WRITE_API_KEY = write_api_key_input

    # Bek√©ri a Felhaszn√°l√≥i API kulcsot. Ha √ºresen hagyja, a jelenlegi megmarad.
    user_api_key_input = input(f"Thingspeak Felhaszn√°l√≥i API kulcs (jelenleg '{THINGSPEAK_USER_API_KEY}', t√∂rl√©shez sz√ºks√©ges): ").strip()
    if user_api_key_input:
        THINGSPEAK_USER_API_KEY = user_api_key_input
        
    print("‚úÖ Thingspeak be√°ll√≠t√°sok friss√≠tve.")

def perform_thingspeak_data_delete():
    """
    Bek√©ri a felhaszn√°l√≥t√≥l, hogy h√°ny perccel ezel≈ëtti adatokat t√∂r√∂lj√∂n, majd v√©grehajtja a t√∂rl√©st.
    """
    try:
        minutes = int(input("H√°ny perccel ezel≈ëtti adatokat t√∂r√∂lj√ºnk? (pl. 5 perc az utols√≥ 5 percet t√∂rli): "))
        if minutes >= 0:
            delete_thingspeak_data(minutes)
        else:
            print("‚ö†Ô∏è √ârv√©nytelen id≈ëtartam, pozit√≠v sz√°mot adj meg!")
    except ValueError:
        print("‚ö†Ô∏è Hib√°s √©rt√©k, csak sz√°mot adj meg!")

# --- F≈ë M≈±k√∂d√©si Ciklus ---

def run_sensor_loop_and_thingspeak():
    """
    Ez a f≈ë m≈±k√∂d√©si ciklus, ami folyamatosan olvassa a szenzor adatait,
    vez√©rli a LED-eket √©s k√ºldi az adatokat a Thingspeakre.
    """
    print("\n‚ñ∂Ô∏è Rendszer ind√≠t√°sa... Nyomj CTRL+C-t a kil√©p√©shez.")
    try:
        while True: # V√©gtelen ciklus a folyamatos m≈±k√∂d√©shez.
            humidity, temp = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN) # Szenzor adatok olvas√°sa.
            if temp is not None and humidity is not None:
                # Ha sikeresen olvasott adatokat, ki√≠rja √©s vez√©rli a LED-eket.
                print(f"\nüå°Ô∏è H≈ëm√©rs√©klet: {temp:.1f}¬∞C, üíß P√°ratartalom: {humidity:.1f}%")
                
                # LED be√°ll√≠t√°sa a h≈ëm√©rs√©kleti limit alapj√°n.
                if temp <= TEMP_LIMIT:
                    set_led(led_below_limit)
                else:
                    set_led(led_above_limit)
                
                # Adatok k√ºld√©se Thingspeakre.
                send_to_thingspeak(temp, humidity)
            else:
                # Hiba eset√©n √©rtes√≠t√©st k√ºld √©s kikapcsolja az √∂sszes LED-et.
                print("‚ùå Szenzorhiba! Ellen≈ërizd a bek√∂t√©st √©s a szenzort. Nincs adat.")
                for led_object in leds.values():
                    if led_object is not None:
                        led_object.value = 0 # Minden LED kikapcsol√°sa hiba eset√©n.
            time.sleep(15) # V√°rakoz√°s 15 m√°sodperc a k√∂vetkez≈ë m√©r√©sig (Thingspeak API limit miatt).

    except KeyboardInterrupt:
        # CTRL+C megnyom√°sakor l√©p ki ebb≈ël a ciklusb√≥l.
        print("\nüõë Kil√©p√©s a ciklusb√≥l...")
    except Exception as e:
        # Egy√©b v√°ratlan hib√°k kezel√©se.
        print(f"Hiba t√∂rt√©nt a fut√°s k√∂zben: {e}")
    finally:
        # Ez a r√©sz mindig lefut, f√ºggetlen√ºl att√≥l, hogy hiba t√∂rt√©nt-e vagy kil√©pett a felhaszn√°l√≥.
        GPIO.cleanup() # Felszabad√≠tja az √∂sszes haszn√°lt GPIO er≈ëforr√°st.
        for led_object in leds.values():
            if led_object is not None:
                led_object.close() # Bez√°rja a gpiozero LED objektumokat.
        print("GPIO er≈ëforr√°sok felszabad√≠tva.")


# --- F≈ëmen√º ---

def main_menu():
    """
    Megjelen√≠ti a f≈ëmen√ºt √©s kezeli a felhaszn√°l√≥i interakci√≥kat.
    Ez a program bel√©p√©si pontja.
    """
    init_leds() # A program ind√≠t√°sakor inicializ√°lja a LED-eket az alap√©rtelmezett be√°ll√≠t√°sokkal.
    while True: # V√©gtelen ciklus a men√º megjelen√≠t√©s√©hez, am√≠g a felhaszn√°l√≥ ki nem l√©p.
        print("\n--- SmartTempHub F≈ëmen√º ---")
        print("1. GPIO portok m√≥dos√≠t√°sa")
        print("2. LED sz√≠nek be√°ll√≠t√°sa h≈ëm√©rs√©klet alapj√°n")
        print("3. Thingspeak be√°ll√≠t√°sok m√≥dos√≠t√°sa")
        print("4. Thingspeak adatok t√∂rl√©se (id≈ëalap√∫)")
        print("5. Rendszer ind√≠t√°sa (Szenzor + LED + Thingspeak)")
        print("6. Kil√©p√©s")

        choice = input("V√°lasszon (1-6): ").strip() # Bek√©ri a felhaszn√°l√≥ v√°laszt√°s√°t.

        if choice == '1':
            change_gpio_pins()
        elif choice == '2':
            change_led_behavior()
        elif choice == '3':
            change_thingspeak_settings()
        elif choice == '4':
            perform_thingspeak_data_delete()
        elif choice == '5':
            run_sensor_loop_and_thingspeak()
            # Ha a fut√°s befejez≈ëd√∂tt (pl. CTRL+C miatt), visszat√©r a f≈ëmen√ºbe.
            # Ekkor √∫jra inicializ√°ljuk a LED-eket, hogy a men√ºb≈ël visszat√©rve is m≈±k√∂djenek.
            init_leds() 
        elif choice == '6':
            print("üëã Kil√©p√©s a programb√≥l...")
            GPIO.cleanup() # Kil√©p√©skor is tiszt√≠tja a GPIO-kat.
            for led_object in leds.values():
                if led_object is not None:
                    led_object.close() # Biztos√≠tja a LED objektumok bez√°r√°s√°t is.
            break # Kil√©p a f≈ëmen√º ciklusb√≥l.
        else:
            print("‚ùå √ârv√©nytelen v√°laszt√°s. K√©rlek, v√°lassz 1 √©s 6 k√∂z√∂tt.")

# A program ind√≠t√°sa a f≈ëmen√º megh√≠v√°s√°val, amikor a szkriptet k√∂zvetlen√ºl futtatj√°k.
if __name__ == "__main__":
    main_menu()
